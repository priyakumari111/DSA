DSA (Data Structures and Algorithms) 
DSA is the study of organizing data efficiently using data structures like arrays, stacks, and trees, paired with step-by-step procedures (or algorithms) to solve problems effectively.
Data structures manage how data is stored and accessed, while algorithms focus on processing this data.


For starting with DSA firstly,
         --> Learn atleast one programming language.
         --> Learn about Time and Space Complexities.
         --> Learn Data Structures and Algorithms.
         --> Practice and Practice and Practice more.
         --> Complete and become a Pro.


1) Logic Building.
2) Learn about Complexities.
3) Array.
4) Searching Algorithms.
5) Sorting Algorithms.
6) Hash.
7) Two Pointer Technique.
8) Window SLiding Technique.
9) Prefix Sum Technique.
10) String.
11) Recursion.
12) Matrix/Grid.
13) Stack.
14) Queue.
15) Linked List.
16) Tree. 
17) Heap.
18) Graph.
19) Greedy Algorithm.
20) Dynamic Programming and many more algorithms. 

Variables
   --> Containers for storing data values
Syntax
   --> Each programming language has it own syntax (though there are a lot of similarity)
Get comfortable with the fundamentals
Keywords: predefined, reserved words that have special meanings to the compiler
Data types
Classification of data like: String, Number, Boolean, Undefined, NULL
Further sub-division of data. 
Why do you think this sub classification is required? - Better memory management



DATA TYPES VS DATA STRUCTURES ? 
Data types and data structures are both important for data science and programming, but they have different roles:
Data types
     ---> Define the basic form of data, such as a variable's type. For example, a data type can be short, int, or long, which specify the size and range of values that can be assigned to a variable. 
Data structures
     ---> Define how data is organized and interacted with. Data structures are a way to store, process, and retrieve data quickly and efficiently. They can be made up of data of different data types. 
Here are some examples of data structures:
Linked list
--> A linear data structure where elements are stored non-contiguously, meaning they can be stored anywhere in memory. 
Stack
--> A linear data structure that operates on a Last In, First Out (LIFO) principle, meaning the last element added is the first to be removed. 
Array
--> A data structure where data is stored in adjoining memory locations, and each element is accessed with an index key. 
